<?php
/**
 * File Error.php
 *
 * @author Tuan Duong <duongthaso@gmail.com>
 * @package Cze
 * @version 1.0
 */
namespace Cze\Controller;
use Cze\Controller;

/**
 * Class Error
 * @package Cze\Controller
 */
class Error extends Controller
{
    const ERROR_CODE_404 = 404;
    const ERROR_CODE_500 = 500;

    /**
     * Initialize Controller
     * @param array $options
     */
    public function init($options = array())
    {
        parent::init();
    }

    /**
     * error action based on the error controller generated by the zend tool
     */
    public function indexAction()
    {
        $this->view->errorCode = static::ERROR_CODE_500;
        $this->view->errorMessage = 'Server Internal Error';
//        $this->view->setLayout('signup.phtml');
        $errors = $this->_getParam('error_handler');

        if (!$errors || !$errors instanceof \ArrayObject) {
            $this->view->message = 'You have reached the error page';
            return;
        }

        // the request
        $this->view->request = $errors->request;

        // conditionally display exceptions
        $this->view->displayExceptions = $this->getInvokeArg('displayExceptions');
        $this->view->exception = $errors->exception;

        $errorCode = static::ERROR_CODE_500;
        if ($errors->exception instanceof Exception) {
            $this->_handleException($errors->exception);
            $exceptionType = get_class($errors->exception);
            switch ($exceptionType) {
                case 'Zend_Controller_Router_Exception':
                case 'Zend_Controller_Action_Exception':
                    if (static::ERROR_CODE_404 == $errors->exception->getCode()) {
                        $errorCode = static::ERROR_CODE_404;
                    }
                    break;
                case 'Zend_Controller_Dispatcher_Exception':
                    $errorCode = static::ERROR_CODE_404;
            }
            $this->view->errorCode = $errorCode;
            $this->getResponse()->setHttpResponseCode($errorCode);
        }

        if (defined('APPLICATION_ENV') && (in_array(APPLICATION_ENV, array('development', 'staging', 'test')))) {
            $this->view->displayExceptions = true;
        }

        $this->view->metaTitle = $this->view->_('Seller Center is in maintenance mode');

        if (static::ERROR_CODE_404 == $this->view->errorCode) {
            $this->view->errorMessage = 'We are sorry but the page you requested cannot be found.';
        }

        $this->render('index');
    }

    /**
     * Does handle exception logic, e.g. logging them, disabling view,
     * passing infos to view etc. pp.
     *
     * @param Exception $exception
     */
    protected function _handleException(Exception $exception)
    {
        $logMessage = SellerCenter_Application_Error::toString($exception);

        Application::getLog()->crit($logMessage);
        if (isset($_SESSION)) {
            Application::getNewRelic()->sendErrorMessage($logMessage, $_SESSION);
        }

        // are we in cli mode?
        if ('cli' === strtolower(PHP_SAPI)) {
            $this->disableView();
            return;
        }

        // is that a user readable exception?
        if ($exception instanceof SellerCenter_Exception) {
            $this->view->message = $logMessage;
            return;
        }
    }
}
